# https://taskfile.dev

version: "3"

vars:
  COV_DATA: coverage.out
  PACKAGE: github.com/FollowTheProcess/cli

tasks:
  default:
    desc: List all available tasks
    silent: true
    cmds:
      - task --list

  tidy:
    desc: Tidy dependencies in go.mod and go.sum
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    cmds:
      - go mod tidy

  fmt:
    desc: Run go fmt on all source files
    sources:
      - "**/*.go"
    preconditions:
      - sh: command -v golines
        msg: golines not installed, see https://github.com/segmentio/golines
    cmds:
      - go fmt ./...
      - golines . --ignore-generated --write-output --max-len 140

  test:
    desc: Run the test suite
    sources:
      - "**/*.go"
      - testdata/**/*.txt
    cmds:
      - go test -race ./... {{ .CLI_ARGS }}

  bench:
    desc: Run all project benchmarks
    sources:
      - "**/*.go"
    cmds:
      - go test ./... -run None -benchmem -bench . {{ .CLI_ARGS }}

  lint:
    desc: Run the linters and auto-fix if possible
    sources:
      - "**/*.go"
      - .golangci.yml
    deps:
      - fmt
    preconditions:
      - sh: command -v golangci-lint
        msg: golangci-lint not installed, see https://golangci-lint.run/usage/install/#local-installation

      - sh: command -v nilaway
        msg: nilaway not installed, see https://github.com/uber-go/nilaway
    cmds:
      - golangci-lint run --fix
      # - nilaway -include-pkgs="{{.PACKAGE}}" ./... # nilaway doesn't work with go 1.23 yet

  docs:
    desc: Render the pkg docs locally
    cmds:
      - pkgsite -open
    preconditions:
      - sh: command -v pkgsite
        msg: pkgsite not installed, run go install golang.org/x/pkgsite/cmd/pkgsite@latest

  demo:
    desc: Render the demo gifs
    sources:
      - ./docs/src/*.tape
      - examples/**/*.go
    preconditions:
      - sh: command -v vhs
        msg: vhs not installed, see https://github.com/charmbracelet/vhs
    cmds:
      - vhs ./docs/src/quickstart.tape

  cov:
    desc: Calculate test coverage and render the html
    cmds:
      - go test -race -cover -covermode atomic -coverprofile {{ .COV_DATA }} ./...
      - go tool cover -html {{ .COV_DATA }}

  check:
    desc: Run tests and linting in one
    cmds:
      - task: test
      - task: lint

  sloc:
    desc: Print lines of code
    cmds:
      - fd . -e go | xargs wc -l | sort -nr | head

  clean:
    desc: Remove build artifacts and other clutter
    cmds:
      - go clean ./...
      - rm -rf {{ .COV_DATA }}
